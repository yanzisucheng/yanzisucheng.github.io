(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{814:function(e,v,_){"use strict";_.r(v);var t=_(4),r=Object(t.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h2",{attrs:{id:"说明"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#说明"}},[e._v("#")]),e._v(" 说明")]),e._v(" "),_("blockquote",[_("p",[e._v("《权威指南vue.js》学习笔记。")])]),e._v(" "),_("h2",{attrs:{id:"介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),_("blockquote",[_("p",[_("code",[e._v("MVC")]),e._v("框架最早出现在Java领域，然后慢慢在前端开发中被提到，后来又出现了"),_("code",[e._v("MVP")]),e._v("，以及现在最成熟的"),_("code",[e._v("MVVM")]),e._v("。")])]),e._v(" "),_("h2",{attrs:{id:"mvc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mvc"}},[e._v("#")]),e._v(" MVC")]),e._v(" "),_("blockquote",[_("p",[e._v("MVC 是应用最广泛的软件架构之一。")])]),e._v(" "),_("p",[e._v("一般 MVC 分为：")]),e._v(" "),_("ul",[_("li",[e._v("Model（模型）")]),e._v(" "),_("li",[e._v("Controller（控制器）")]),e._v(" "),_("li",[e._v("View（视图）")])]),e._v(" "),_("p",[e._v("基于分成，让彼此职责分开。")]),e._v(" "),_("p",[e._v("1、View 一般都是通过 Controller 来和 Model 进行联系的。")]),e._v(" "),_("p",[e._v("2、Controller 是 Model 和 View 的协调者。")]),e._v(" "),_("p",[e._v("3、View 和 Model不直接联系。")]),e._v(" "),_("p",[e._v("4、基本联系都是单向的。")]),e._v(" "),_("p",[e._v("5、通信方式一：Controller --\x3e Model --\x3e View --\x3e Controller")]),e._v(" "),_("p",[e._v("6、通信方式二：User（用户） --\x3e Controller --\x3e Model --\x3e View")]),e._v(" "),_("h2",{attrs:{id:"mvp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mvp"}},[e._v("#")]),e._v(" MVP")]),e._v(" "),_("blockquote",[_("p",[e._v("MVP 是从经典的 MVC 模式演变而来的。")])]),e._v(" "),_("p",[e._v("与 MVC 相通之处：")]),e._v(" "),_("ul",[_("li",[e._v("Controller/Presenter 负责逻辑处理")]),e._v(" "),_("li",[e._v("Model 提供数据")]),e._v(" "),_("li",[e._v("View 负责显示")])]),e._v(" "),_("p",[e._v("在 MVP 中：")]),e._v(" "),_("p",[e._v("1、Presenter 完全把 View 和 Model 进行了分离。")]),e._v(" "),_("p",[e._v("2、主要的程序逻辑在 Presenter 里实现。")]),e._v(" "),_("p",[e._v("3、Presenter 与 具体的 View 是没有直接关联的。")]),e._v(" "),_("p",[e._v("4、Presenter 与 View 通过定义好的接口进行交互，从而使得在变更 View 的时候可以保持 Presenter 不变。")]),e._v(" "),_("p",[e._v("5、通信方式：View <-----\x3e Presenter <-----\x3e Model")]),e._v(" "),_("h2",{attrs:{id:"mvvm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mvvm"}},[e._v("#")]),e._v(" MVVM")]),e._v(" "),_("blockquote",[_("p",[e._v("MVVM 只是把 MVC 的 Controller 和 MVP 的 Presenter 改成了 ViewModel，View 的变化会自动更新到 ViewModel，ViewModel 的变化也会自动同步到 View 上显示。")])]),e._v(" "),_("p",[e._v("MVVM 代表框架有：Knockout、Ember.js...")]),e._v(" "),_("p",[e._v("1、这种自动同步是因为 ViewModel 中的属性实现了 Observer，当属性变更时都能触发对应的操作")]),e._v(" "),_("p",[e._v("2、用户操作影响：View <-- （DataBinding） --\x3e ViewModel <-----\x3e Model")])])}),[],!1,null,null,null);v.default=r.exports}}]);